<h1>課程</h1>
<p><span>自 1990 年 <a href="https://en.wikipedia.org/wiki/HTML">HTML</a> 與 <a href="https://en.wikipedia.org/wiki/World_Wide_Web">WWW</a> 伺服器首度出現在一台 <a href="https://en.wikipedia.org/wiki/NeXT">NeXT</a> 電腦上, 就已經揭示一個新世代的開始, 經過近 30 年的發展, 目前的網際環境已經能夠與單機操作系統上的應用程式緊密結合, 許多應用程式的開發, 透過網路與分散式版次管理系統, 幾乎隨時都在持續改進.<br/><br/>身為機械設計工程師, 必須明確了解在網際技術不斷推升的歷程, 過去厚重且無法分割的大型套件, 將逐漸被敏捷可攜的雲端應用所取代, <a href="https://en.wikipedia.org/wiki/Onshape">Onshape</a> 的開發團隊, 在 2012 成立時, 便已清楚看到此一趨勢, 使用者只要透過瀏覽器或 App 就能協同進行產品的機械設計與分析.<br/><br/>但是, 一套試圖集大成的雲端套件, 絕無法滿足未來網際時代新產品開發過程中的諸多需求, 必須由每一位機械設計工程師做起, 充分了解網路與電腦的應用範圍, 在既有基礎上, 有能力在網際環境中搭建屬於自己能夠掌控的流程, 開發合用的雲端程式.</span></p>
<p><span>為了讓協同產品開發過程中的表達不至於混亂, 於是導入分散式版次管理的工具, 包括 Git 與 Fossil SCM, 為了能夠善用電腦與網路進行表達, 於是將靜態內容放在 Github Pages 或自行架設的 Nginx 伺服器中, 至於能夠即時更動的動態內容系統則採用雲端 Heroku 或自行架設的 uwsgi 網際環境中.</span></p>
<p><span>為了能夠快速讓產品開發者將概念轉化為數位模擬系統, KMOL 採用 Python 建構軟體雛形, 並設法利用 Cython 技術, 以 C++ 的執行速度進行工程分析.<br/><br/>為了讓成員有機會一窺各種開源工具的內部設計, KMOL 在 Windows 10 64 位元環境中以 Msys2 編譯 Solvespace、Fossil SCM、V-rep 以及 Range CAE 套件.</span></p>
<h1>V-rep 模擬</h1><h2>BubbleRob Tutorial</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/QEub0GUP8-Y?t=67s" width="560"></iframe></p>
<h2>手足球</h2>
<h3>系統功能模擬</h3>
<p style="text-align: center;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wEtOXdks_ds?t=51s" width="560"></iframe></p>
<p style="text-align: center;">單人足球員</p>
<p style="text-align: center;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/WQ13H6bC_LY?t=1s" width="560"></iframe></p>
<p style="text-align: center;">雙人足球員</p>
<h3>人對人 對打</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/aAG0wYawJ-I?t=27s" width="560"></iframe></p>
<p>程式碼:每個軸類推</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">-- model in Solvespace 500 mm = 5000 mm in V-rep
--[[
Simulation is 10 times of realistic environment
floor in Solvespace 2.5 m x 2.5 m = 25 m x 25 m in V-rep
ball is in Solivespace 1g (0.001) = 0.01 kg in V-rep
hammer is in Solvespace 0.1 kg (100g) = 1kg in V-rep (0.1 for Inertia)
]]
 
threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do

            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==119) then
                    -- up key
                    velocity=1
                    torque=-200
                    hammer_back = -100
                end
                if (auxiliaryData[1]==115) then
                    -- down key
                     hammer_back = 100
                     torque=200
                     velocity = 0
                end
                if (auxiliaryData[1]==97) then
                    -- right key
                     sliding = sliding + 0.005
sim.addStatusbarMessage('sliding:'..sliding)
                 
                end
                if (auxiliaryData[1]==100) then
                    -- left key
                     sliding = sliding - 0.005
sim.addStatusbarMessage('sliding:'..sliding)
                end
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
  
        -- We take care of setting the desired hammer position:
        if hammer_back == 1
            then
               sim.setJointPosition(joint, -1, orientation)
               --sim.setObjectPosition(hammer, -1, position)
        end
        sim.setJointTargetPosition(joint, velocity)
        --sim.setJointForce(joint,torque)
        sim.setJointTargetPosition(slider, sliding)
 
        -- Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end
end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:
joint=sim.getObjectHandle('Revolute_1')
hammer=sim.getObjectHandle('pool_1')
slider=sim.getObjectHandle("joint_1")
velocity=0
hammer_back=0
torque=0
sliding = 0
orientation=sim.getJointPosition(joint, -1)
position=sim.getObjectPosition(hammer, -1)
slider_position=sim.getJointPosition(slider, -1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end
  
-- Put some clean-up code here:</pre>
<p></p><h3>人對機 對打</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/MxwbTm1Q78Q" width="560"></iframe></p>
<p>程式碼-人三個軸合一</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">-- model in Solvespace 500 mm = 5000 mm in V-rep
--[[
Simulation is 10 times of realistic environment
floor in Solvespace 2.5 m x 2.5 m = 25 m x 25 m in V-rep
ball is in Solivespace 1g (0.001) = 0.01 kg in V-rep
hammer is in Solvespace 0.1 kg (100g) = 1kg in V-rep (0.1 for Inertia)
]]
local joint_r = {'left_joint1','left_joint3','left_joint5','left_joint7'}
local joint_b = {'left_joint','left_joint2','left_joint4','left_joint6'}
local slider_r ={'left_slider1','left_slider3','left_slider5','left_slider7'}
local slider_b ={'left_slider','left_slider2','left_slider4','left_slider6'}
local player_r ={'left_bearing1','left_bearing3','left_bearing5','left_bearing7'}


threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
key=auxiliaryData[1]
sim.addStatusbarMessage('key:'..key)

            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==119) then
                    -- up key
                    joint_all_c1=sim.getObjectHandle(joint_b[1])
                    joint_all_c2=sim.getObjectHandle(joint_b[2])
                    joint_all_c3=sim.getObjectHandle(joint_b[3])
                    joint_all_c4=sim.getObjectHandle(joint_b[4]) 
                    velocity=100
                    torque=200
                    hammer_back = 0
end
                if  (auxiliaryData[1]==115) then
                    -- down key
                    joint_all_c1=sim.getObjectHandle(joint_b[1])
                    joint_all_c2=sim.getObjectHandle(joint_b[2])
                    joint_all_c3=sim.getObjectHandle(joint_b[3])
                    joint_all_c4=sim.getObjectHandle(joint_b[4])
                     hammer_back = 1
                     torque=-200
                     velocity =-100
end
                if  (auxiliaryData[1]==100) then
                    -- right key 
                if (sliding_b&gt;=0.3)then else sliding_b = sliding_b + 0.05 end
                sim.addStatusbarMessage('sliding_b:'..sliding_b)
                end
                if  (auxiliaryData[1]==97) then
                    -- left key
                    if (sliding_b&lt;=-0.3)then else sliding_b = sliding_b - 0.05 end
                    sim.addStatusbarMessage('sliding_b:'..sliding_b)
                end
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
 
        -- We take care of setting the desired hammer position:
        if hammer_back == 1
            then 
        sim.setJointTargetPosition(joint_all_c1, velocity)
        sim.setJointTargetPosition(joint_all_c2, velocity)
        sim.setJointTargetPosition(joint_all_c3, velocity)
        sim.setJointTargetPosition(joint_all_c4, velocity)
               --sim.setObjectPosition(hammer, -1, position)
        end
        sim.setJointTargetPosition(joint_all_c1, velocity)
        sim.setJointTargetPosition(joint_all_c2, velocity)
        sim.setJointTargetPosition(joint_all_c3, velocity)
        sim.setJointTargetPosition(joint_all_c4, velocity)

        sim.setJointTargetPosition(slider_b_c1, sliding_b)
        sim.setJointTargetPosition(slider_b_c2, sliding_b)
        sim.setJointTargetPosition(slider_b_c3, sliding_b)
        sim.setJointTargetPosition(slider_b_c4, sliding_b)
        --Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end

end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:



joint_all_c1=sim.getObjectHandle(joint_b[1])
joint_all_c2=sim.getObjectHandle(joint_b[2])
joint_all_c3=sim.getObjectHandle(joint_b[3])
joint_all_c4=sim.getObjectHandle(joint_b[4])

slider_b_c1=sim.getObjectHandle(slider_b[1])
slider_b_c2=sim.getObjectHandle(slider_b[2])  
slider_b_c3=sim.getObjectHandle(slider_b[3])
slider_b_c4=sim.getObjectHandle(slider_b[4]) 

hammer=sim.getObjectHandle('player')
velocity=0
hammer_back=0
torque=0
--sliding_r = 0
sliding_b = 0
Bplayer1_slider=0
orientation=sim.getJointPosition(joint_all_c1, -1)
position=sim.getObjectPosition(hammer, -1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end
 
-- Put some clean-up code here:</pre>
<p>程式碼-機單軸</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    KickBallV = 10
    R_KickBallVel = (math.pi/180)*KickBallV
    B_KickBallVel = -(math.pi/180)*KickBallV
    Sphere_handle=sim.getObjectHandle('Sphere')
    origin_position=sim.getObjectHandle('table')
    player_M_handle=sim.getObjectHandle('player_cloth5')
    player_L_handle=sim.getObjectHandle('player_cloth5_L')
    player_R_handle=sim.getObjectHandle('player_cloth5_R')
    joint_handle =sim.getObjectHandle('left_joint5')
    slider_handle=sim.getObjectHandle('left_slider5')
    speed=  0.01
    Xmin=  -0.01
    Xmax=   0.02
    YMmin=  -0.03
    YMmax=  0.03

end
function sysCall_actuation()
    position_origin=sim.getObjectPosition(origin_position,-1)
    position_player_M=sim.getObjectPosition(player_M_handle,-1)
    position_player_L=sim.getObjectPosition(player_L_handle,-1)
    position_player_R=sim.getObjectPosition(player_R_handle,-1)
    position_S=sim.getObjectPosition(Sphere_handle,-1)
    X =position_S[1] - position_player_M[1]
    Y =position_S[2] - position_origin[2]
    slider=0
        if     Y &gt; YMmax  then
            LY=position_S[2]-position_player_L[2]
            if LY &gt; 0 then slider = slider + speed
            elseif LY &lt; 0 then slider = slider -speed
            end

        elseif Y &lt; YMmin  then 
            RY=position_S[2]-position_player_R[2]
            if RY &gt; 0 then slider = slider +speed
            elseif RY &lt; 0 then slider = slider -speed
            end
        else
            MY=position_S[2]-position_player_M[2]
            if MY &gt; 0 then slider = slider +speed
            elseif MY &lt; 0 then slider = slider -speed
            end
        end
        if X &lt; Xmax and X &gt; Xmin  then
            sim.setJointTargetVelocity(joint_handle,B_KickBallVel)
            sim.setJointTargetVelocity(joint_handle,-1)
        else
            sim.setJointTargetVelocity(joint_handle,B_KickBallVel)
            sim.setJointTargetVelocity(joint_handle,1)
        end
        sim.setJointTargetVelocity(slider_handle,slider)
        sim.addStatusbarMessage('slider_handle:'..slider)
end</pre>
<p></p><h3>機對機 對打</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Uv_SfE0ZHog" width="560"></iframe></p>
<p>程式碼:機單軸</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    KickBallV = 10
    R_KickBallVel = (math.pi/180)*KickBallV
    B_KickBallVel = -(math.pi/180)*KickBallV
    Sphere_handle=sim.getObjectHandle('Sphere')
    origin_position=sim.getObjectHandle('table')
    player_M_handle=sim.getObjectHandle('player_cloth5')
    player_L_handle=sim.getObjectHandle('player_cloth5_L')
    player_R_handle=sim.getObjectHandle('player_cloth5_R')
    joint_handle =sim.getObjectHandle('left_joint5')
    slider_handle=sim.getObjectHandle('left_slider5')
    speed=  0.01
    Xmin=  -0.01
    Xmax=   0.02
    YMmin=  -0.03
    YMmax=  0.03

end
function sysCall_actuation()
    position_origin=sim.getObjectPosition(origin_position,-1)
    position_player_M=sim.getObjectPosition(player_M_handle,-1)
    position_player_L=sim.getObjectPosition(player_L_handle,-1)
    position_player_R=sim.getObjectPosition(player_R_handle,-1)
    position_S=sim.getObjectPosition(Sphere_handle,-1)
    X =position_S[1] - position_player_M[1]
    Y =position_S[2] - position_origin[2]
    slider=0
        if     Y &gt; YMmax  then
            LY=position_S[2]-position_player_L[2]
            if LY &gt; 0 then slider = slider + speed
            elseif LY &lt; 0 then slider = slider -speed
            end

        elseif Y &lt; YMmin  then 
            RY=position_S[2]-position_player_R[2]
            if RY &gt; 0 then slider = slider +speed
            elseif RY &lt; 0 then slider = slider -speed
            end
        else
            MY=position_S[2]-position_player_M[2]
            if MY &gt; 0 then slider = slider +speed
            elseif MY &lt; 0 then slider = slider -speed
            end
        end
        if X &lt; Xmax and X &gt; Xmin  then
            sim.setJointTargetVelocity(joint_handle,B_KickBallVel)
            sim.setJointTargetVelocity(joint_handle,-1)
        else
            sim.setJointTargetVelocity(joint_handle,B_KickBallVel)
            sim.setJointTargetVelocity(joint_handle,1)
        end
        sim.setJointTargetVelocity(slider_handle,slider)
        sim.addStatusbarMessage('slider_handle:'..slider)
end</pre>
<p><br/><br/></p><h1>期中影片</h1>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/AhlUSY58QDQ?t=4s" width="560"></iframe></p><h1>期末影片</h1>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/z7thbG8H-AY?t=1s" width="560"></iframe></p><h1>Bg2 倉儲</h1>
<p><a href="https://mdecadp2018.github.io/site-40623249/reveal/#/">個人投影片</a></p>
<p><a href="https://github.com/mdecadp2018/site-40623249">個人倉儲</a></p>
<p><a href="https://mdekmol.github.io/cd2019b-task1-2019cdb_t1_g2/content/index.html">協同產品設計實習第二組</a></p>
<p><a href="http://cpgx.kmol.info/cd2019b/content/index.html">2019 Spring 協同產品設計實習期末報告 B 網站</a></p>
<h1>期末自評成績</h1>
<p>我給自己打:65分</p>
<p></p>